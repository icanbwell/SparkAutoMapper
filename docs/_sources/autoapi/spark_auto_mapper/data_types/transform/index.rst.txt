:py:mod:`spark_auto_mapper.data_types.transform`
================================================

.. py:module:: spark_auto_mapper.data_types.transform


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper.data_types.transform.AutoMapperTransformDataType




.. py:class:: AutoMapperTransformDataType(column, value)

   Bases: :py:obj:`spark_auto_mapper.data_types.array_base.AutoMapperArrayLikeBase`, :py:obj:`Generic`\ [\ :py:obj:`_TAutoMapperDataType`\ ]

   Abstract base class for generic types.

   A generic type is typically declared by inheriting from
   this class parameterized with one or more type variables.
   For example, a generic mapping type might be defined as::

     class Mapping(Generic[KT, VT]):
         def __getitem__(self, key: KT) -> VT:
             ...
         # Etc.

   This class can then be used as follows::

     def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
         try:
             return mapping[key]
         except KeyError:
             return default

   .. py:method:: include_null_properties(self, include_null_properties)


   .. py:method:: get_column_spec(self, source_df, current_column)

      Gets the column spec for this automapper data type

      :param source_df: source data frame in case the automapper type needs that data to decide what to do
      :param current_column: (Optional) this is set when we are inside an array



