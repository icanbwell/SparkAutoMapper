:py:mod:`spark_auto_mapper.helpers.automapper_helpers`
======================================================

.. py:module:: spark_auto_mapper.helpers.automapper_helpers


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper.helpers.automapper_helpers.AutoMapperHelpers




.. py:class:: AutoMapperHelpers

   .. py:method:: struct(value)
      :staticmethod:

      Creates a struct

      :param value: A dictionary to be converted to a struct
      :return: A struct automapper type


   .. py:method:: complex(**kwargs)
      :staticmethod:

      Creates a complex type.

      :param kwargs: parameters to be used to create the complex type
      :return: A complex automapper type


   .. py:method:: column(value)
      :staticmethod:

      Specifies that the value parameter should be used as a column name

      :param value: name of column
      :return: A column automapper type


   .. py:method:: text(value)
      :staticmethod:

      Specifies that the value parameter should be used as a literal text

      :param value: text value
      :return: a text automapper type


   .. py:method:: expression(value)
      :staticmethod:

      Specifies that the value parameter should be executed as a sql expression in Spark

      :param value: sql
      :return: an expression automapper type


   .. py:method:: date(value, formats = None)
      :staticmethod:

      Converts a value to date only
      For datetime use the datetime mapper type


      :param value: value
      :param formats: (Optional) formats to use for trying to parse the value otherwise uses:
                      y-M-d
                      yyyyMMdd
                      M/d/y


   .. py:method:: datetime(value, formats = None)
      :staticmethod:

      Converts the value to a timestamp type in Spark


      :param value: value
      :param formats: (Optional) formats to use for trying to parse the value otherwise uses Spark defaults


   .. py:method:: decimal(value, precision, scale)
      :staticmethod:

      Specifies the value should be used as a decimal

      :param value:
      :param precision: the maximum total number of digits (on both sides of dot)
      :param scale: the number of digits on right side of dot
      :return: a decimal automapper type


   .. py:method:: amount(value)
      :staticmethod:

      Specifies the value should be used as an amount

      :param value:
      :return: an amount automapper type


   .. py:method:: boolean(value)
      :staticmethod:

      Specifies the value should be used as a boolean

      :param value:
      :return: a boolean automapper type


   .. py:method:: number(value)
      :staticmethod:

      Specifies value should be used as a number

      :param value:
      :return: a number automapper type


   .. py:method:: concat(*args)
      :staticmethod:

      concatenates a list of values.  Each value can be a string or a column

      :param args: string or column
      :return: a concat automapper type


   .. py:method:: if_(column, check, value, else_ = None)
      :staticmethod:

      Checks if column matches check_value.  Returns value if it matches else else_


      :param column: column to check
      :param check: value to compare the column to
      :param value: what to return if the value matches
      :param else_: what value to assign if check fails
      :return: an if automapper type


   .. py:method:: if_not(column, check, value)
      :staticmethod:

      Checks if column matches check_value.  Returns value if it does not match


      :param column: column to check
      :param check: value to compare the column to
      :param value: what to return if the value matches
      :return: an if automapper type


   .. py:method:: if_not_null(check, value, when_null = None)
      :staticmethod:

      Checks if `check` is null


      :param check: column to check for null
      :param value: what to return if the value is not null
      :param when_null: what value to assign if check is not
      :return: an if_not_null automapper type


   .. py:method:: if_not_null_or_empty(check, value, when_null_or_empty = None)
      :staticmethod:

      Checks if `check` is null or empty.


      :param check: column to check for null
      :param value: what to return if the value is not null
      :param when_null_or_empty: what value to assign if check is not
      :return: an if_not_null automapper type


   .. py:method:: map(column, mapping, default = None)
      :staticmethod:

      maps the contents of a column to values

      :param column: column
      :param mapping: A dictionary mapping the contents of the column to other values
                      e.g., {"Y":"Yes", "N": "No"}
      :param default: the value to assign if no value matches
      :return: a map automapper type


   .. py:method:: left(column, length)
      :staticmethod:

      Take the specified number of first characters in a string

      :param column: column whose contents to use
      :param length: number of characters to take from left
      :return: a concat automapper type


   .. py:method:: right(column, length)
      :staticmethod:

      Take the specified number of last characters in a string

      :param column: column whose contents to use
      :param length: number of characters to take from right
      :return: a concat automapper type


   .. py:method:: substring(column, start, length)
      :staticmethod:

      Finds a substring in the specified string.

      :param column: column whose contents to use
      :param start: position to start
      :param length: number of characters to take
      :return: a concat automapper type


   .. py:method:: string_before_delimiter(column, delimiter)
      :staticmethod:

      Take the specified number of first characters in a string

      :param column: column whose contents to use
      :param delimiter: string to use as delimiter
      :return: a concat automapper type


   .. py:method:: string_after_delimiter(column, delimiter)
      :staticmethod:

      Take the specified number of first characters in a string

      :param column: column whose contents to use
      :param delimiter: string to use as delimiter
      :return: a concat automapper type


   .. py:method:: substring_by_delimiter(column, delimiter, delimiter_count)
      :staticmethod:

      Returns the substring from string str before count occurrences of the delimiter.
      substring_by_delimiter performs a case-sensitive match when searching for delimiter.

      :param column: column whose contents to use
      :param delimiter: string to use as delimiter.  can be a regex.
      :param delimiter_count: If delimiter_count is positive, everything the left of the final delimiter
                                  (counting from left) is returned.
                              If delimiter_count is negative, every to the right of the final delimiter
                                  (counting from the right) is returned.
      :return: a concat automapper type


   .. py:method:: regex_replace(column, pattern, replacement)
      :staticmethod:

      Replace all substrings of the specified string value that match regexp with rep.

      :param column: column whose contents to replace
      :param pattern: pattern to search for
      :param replacement: string to replace with
      :return: a regex_replace automapper type


   .. py:method:: regex_extract(column, pattern, index)
      :staticmethod:

      Extracts a specific group matched by a regex from a specified column. If there
      was no match or the requested group does not exist, an empty string is returned.

      :param column: column whose contents to replace
      :param pattern: pattern containing groups to match
      :param index: index of the group to return (1-indexed, use 0 to return the whole matched string)
      :return: a regex_extract automapper type


   .. py:method:: trim(column)
      :staticmethod:

      Trim the spaces from both ends for the specified string column.

      :param column: column whose contents to trim
      :return: a trim automapper type


   .. py:method:: lpad(column, length, pad)
      :staticmethod:

      Returns column value, left-padded with pad to a length of length. If column value is longer than length,
      the return value is shortened to length characters.

      :param column: column whose contents to left pad
      :param length: the desired length of the final string
      :param pad: the character to use to pad the string to the desired length


   .. py:method:: hash(*args)
      :staticmethod:

      Calculates the hash code of given columns, and returns the result as an int column.


      :param args: string or column
      :return: a concat automapper type


   .. py:method:: coalesce(*args)
      :staticmethod:

      Returns the first value that is not null.

      :return: a coalesce automapper type


   .. py:method:: array_max(*args)
      :staticmethod:

      Returns the first value that is not null.

      :return: a coalesce automapper type


   .. py:method:: array_distinct(*args)
      :staticmethod:

      Returns the distinct items in the array.

      :return: a coalesce automapper type


   .. py:method:: if_regex(column, check, value, else_ = None)
      :staticmethod:

      Checks if column matches check_value.  Returns value if it matches else else_


      :param column: column to check
      :param check: value to compare the column to. Has to be a string or list of strings
      :param value: what to return if the value matches
      :param else_: what value to assign if check fails
      :return: an if automapper type


   .. py:method:: filter(column, func)
      :staticmethod:

      Filters a column by a function


      :param column: column to check
      :param func: func to filter by
      :return: a filter automapper type


   .. py:method:: transform(column, value)
      :staticmethod:

      transforms a column into another type or struct


      :param column: column to check
      :param value: func to create type or struct
      :return: a transform automapper type


   .. py:method:: field(value)
      :staticmethod:

      Specifies that the value parameter should be used as a field name

      :param value: name of column
      :return: A column automapper type


   .. py:method:: current()
      :staticmethod:

      Specifies to use the current item

      :return: A column automapper type


   .. py:method:: split_by_delimiter(column, delimiter)
      :staticmethod:

      Split a string into an array using the delimiter

      :param column: column whose contents to use
      :param delimiter: string to use as delimiter
      :return: a concat automapper type


   .. py:method:: float(value)
      :staticmethod:

      Converts column to float

      :return:
      :rtype:


   .. py:method:: flatten(column)
      :staticmethod:

      creates a single array from an array of arrays.
      If a structure of nested arrays is deeper than two levels, only one level of nesting is removed.
      source: http://spark.apache.org/docs/latest/api/python/_modules/pyspark/sql/functions.html#flatten

      :return: a flatten automapper type


   .. py:method:: first_valid_column(*columns)
      :staticmethod:

      Allows for columns to be defined based in which a source column may not exist. If the optional source column does
       not exist, the "default" column definition is used instead.

       :return: a optional automapper type


   .. py:method:: if_column_exists(column, if_exists, if_not_exists)
      :staticmethod:

      check the if the column exists if exists returns if_exists if not if_not_exists

      :return: a optional automapper type


   .. py:method:: array(value)
      :staticmethod:

      creates an array from a single item.
      source: http://spark.apache.org/docs/latest/api/python/_modules/pyspark/sql/functions.html#array

      :return: an array automapper type


   .. py:method:: join_using_delimiter(column, delimiter)
      :staticmethod:

      Joins an array and forms a string using the delimiter

      :param column: column whose contents to use
      :param delimiter: string to use as delimiter
      :return: a join automapper type


   .. py:method:: unix_timestamp(value)
      :staticmethod:

      Joins an array and forms a string using the delimiter

      :param column: column whose contents to use
      :param delimiter: string to use as delimiter
      :return: a join automapper type



