:mod:`spark_auto_mapper.helpers.automapper_helpers`
===================================================

.. py:module:: spark_auto_mapper.helpers.automapper_helpers


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper.helpers.automapper_helpers.AutoMapperHelpers



.. data:: _TAutoMapperDataType
   

   

.. class:: AutoMapperHelpers

   .. method:: struct(value: Dict[(str, Any)]) -> spark_auto_mapper.data_types.complex.struct_type.AutoMapperDataTypeStruct
      :staticmethod:

      Creates a struct
      :param value: A dictionary to be converted to a struct
      :return: A struct automapper type


   .. method:: complex(**kwargs: spark_auto_mapper.type_definitions.defined_types.AutoMapperAnyDataType) -> spark_auto_mapper.data_types.complex.complex.AutoMapperDataTypeComplex
      :staticmethod:

      Creates a complex type.
      :param kwargs: parameters to be used to create the complex type
      :return: A complex automapper type


   .. method:: column(value: str) -> spark_auto_mapper.data_types.array_base.AutoMapperArrayLikeBase
      :staticmethod:

      Specifies that the value parameter should be used as a column name
      :param value: name of column
      :return: A column automapper type


   .. method:: text(value: Union[(AutoMapperNativeSimpleType, AutoMapperTextInputType)]) -> spark_auto_mapper.data_types.text_like_base.AutoMapperTextLikeBase
      :staticmethod:

      Specifies that the value parameter should be used as a literal text
      :param value: text value
      :return: a text automapper type


   .. method:: expression(value: str) -> spark_auto_mapper.data_types.array_base.AutoMapperArrayLikeBase
      :staticmethod:

      Specifies that the value parameter should be executed as a sql expression in Spark
      :param value: sql
      :return: an expression automapper type


   .. method:: date(value: spark_auto_mapper.type_definitions.defined_types.AutoMapperDateInputType, formats: Optional[List[str]] = None) -> spark_auto_mapper.data_types.date.AutoMapperDateDataType
      :staticmethod:

      Converts a value to date only
      For datetime use the datetime mapper type


      :param value: value
      :param formats: (Optional) formats to use for trying to parse the value otherwise uses:
                      y-M-d
                      yyyyMMdd
                      M/d/y


   .. method:: datetime(value: spark_auto_mapper.type_definitions.defined_types.AutoMapperDateInputType, formats: Optional[List[str]] = None) -> spark_auto_mapper.data_types.datetime.AutoMapperDateTimeDataType
      :staticmethod:

      Converts the value to a timestamp type in Spark


      :param value: value
      :param formats: (Optional) formats to use for trying to parse the value otherwise uses Spark defaults


   .. method:: decimal(value: spark_auto_mapper.type_definitions.defined_types.AutoMapperAmountInputType, precision: int, scale: int) -> spark_auto_mapper.data_types.decimal.AutoMapperDecimalDataType
      :staticmethod:

      Specifies the value should be used as a decimal
      :param value:
      :param precision: the maximum total number of digits (on both sides of dot)
      :param scale: the number of digits on right side of dot
      :return: a decimal automapper type


   .. method:: amount(value: spark_auto_mapper.type_definitions.defined_types.AutoMapperAmountInputType) -> spark_auto_mapper.data_types.amount.AutoMapperAmountDataType
      :staticmethod:

      Specifies the value should be used as an amount
      :param value:
      :return: an amount automapper type


   .. method:: boolean(value: spark_auto_mapper.type_definitions.defined_types.AutoMapperBooleanInputType) -> spark_auto_mapper.data_types.boolean.AutoMapperBooleanDataType
      :staticmethod:

      Specifies the value should be used as a boolean
      :param value:
      :return: a boolean automapper type


   .. method:: number(value: spark_auto_mapper.type_definitions.defined_types.AutoMapperNumberInputType) -> spark_auto_mapper.data_types.number.AutoMapperNumberDataType
      :staticmethod:

      Specifies value should be used as a number
      :param value:
      :return: a number automapper type


   .. method:: concat(*args: Union[(AutoMapperNativeTextType, AutoMapperWrapperType, AutoMapperTextLikeBase, AutoMapperDataTypeBase)]) -> spark_auto_mapper.data_types.concat.AutoMapperConcatDataType
      :staticmethod:

      concatenates a list of values.  Each value can be a string or a column
      :param args: string or column
      :return: a concat automapper type


   .. method:: if_(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, check: Union[(AutoMapperAnyDataType, List[AutoMapperAnyDataType])], value: _TAutoMapperDataType, else_: Optional[_TAutoMapperDataType] = None) -> _TAutoMapperDataType
      :staticmethod:

      Checks if column matches check_value.  Returns value if it matches else else_


      :param column: column to check
      :param check: value to compare the column to
      :param value: what to return if the value matches
      :param else_: what value to assign if check fails
      :return: an if automapper type


   .. method:: if_not(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, check: Union[(AutoMapperAnyDataType, List[AutoMapperAnyDataType])], value: _TAutoMapperDataType) -> _TAutoMapperDataType
      :staticmethod:

      Checks if column matches check_value.  Returns value if it does not match


      :param column: column to check
      :param check: value to compare the column to
      :param value: what to return if the value matches
      :return: an if automapper type


   .. method:: if_not_null(check: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, value: _TAutoMapperDataType, when_null: Optional[_TAutoMapperDataType] = None) -> _TAutoMapperDataType
      :staticmethod:

      Checks if `check` is null


      :param check: column to check for null
      :param value: what to return if the value is not null
      :param when_null: what value to assign if check is not
      :return: an if_not_null automapper type


   .. method:: if_not_null_or_empty(check: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, value: _TAutoMapperDataType, when_null_or_empty: Optional[_TAutoMapperDataType] = None) -> _TAutoMapperDataType
      :staticmethod:

      Checks if `check` is null or empty.


      :param check: column to check for null
      :param value: what to return if the value is not null
      :param when_null_or_empty: what value to assign if check is not
      :return: an if_not_null automapper type


   .. method:: map(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, mapping: Dict[(Optional[AutoMapperTextInputType], AutoMapperAnyDataType)], default: Optional[AutoMapperAnyDataType] = None) -> spark_auto_mapper.data_types.expression.AutoMapperDataTypeExpression
      :staticmethod:

      maps the contents of a column to values
      :param column: column
      :param mapping: A dictionary mapping the contents of the column to other values
                      e.g., {"Y":"Yes", "N": "No"}
      :param default: the value to assign if no value matches
      :return: a map automapper type


   .. method:: left(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, length: int) -> spark_auto_mapper.data_types.substring.AutoMapperSubstringDataType
      :staticmethod:

      Take the specified number of first characters in a string

      :param column: column whose contents to use
      :param length: number of characters to take from left
      :return: a concat automapper type


   .. method:: right(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, length: int) -> spark_auto_mapper.data_types.substring.AutoMapperSubstringDataType
      :staticmethod:

      Take the specified number of last characters in a string

      :param column: column whose contents to use
      :param length: number of characters to take from right
      :return: a concat automapper type


   .. method:: substring(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, start: int, length: int) -> spark_auto_mapper.data_types.substring.AutoMapperSubstringDataType
      :staticmethod:

      Finds a substring in the specified string.

      :param column: column whose contents to use
      :param start: position to start
      :param length: number of characters to take
      :return: a concat automapper type


   .. method:: string_before_delimiter(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, delimiter: str) -> spark_auto_mapper.data_types.substring_by_delimiter.AutoMapperSubstringByDelimiterDataType
      :staticmethod:

      Take the specified number of first characters in a string

      :param column: column whose contents to use
      :param delimiter: string to use as delimiter
      :return: a concat automapper type


   .. method:: string_after_delimiter(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, delimiter: str) -> spark_auto_mapper.data_types.substring_by_delimiter.AutoMapperSubstringByDelimiterDataType
      :staticmethod:

      Take the specified number of first characters in a string

      :param column: column whose contents to use
      :param delimiter: string to use as delimiter
      :return: a concat automapper type


   .. method:: substring_by_delimiter(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, delimiter: str, delimiter_count: int) -> spark_auto_mapper.data_types.substring_by_delimiter.AutoMapperSubstringByDelimiterDataType
      :staticmethod:

      Returns the substring from string str before count occurrences of the delimiter.
      substring_by_delimiter performs a case-sensitive match when searching for delimiter.

      :param column: column whose contents to use
      :param delimiter: string to use as delimiter.  can be a regex.
      :param delimiter_count: If delimiter_count is positive, everything the left of the final delimiter
                                  (counting from left) is returned.
                              If delimiter_count is negative, every to the right of the final delimiter
                                  (counting from the right) is returned.
      :return: a concat automapper type


   .. method:: regex_replace(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, pattern: str, replacement: str) -> spark_auto_mapper.data_types.regex_replace.AutoMapperRegExReplaceDataType
      :staticmethod:

      Replace all substrings of the specified string value that match regexp with rep.

      :param column: column whose contents to replace
      :param pattern: pattern to search for
      :param replacement: string to replace with
      :return: a regex_replace automapper type


   .. method:: regex_extract(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, pattern: str, index: int) -> spark_auto_mapper.data_types.regex_extract.AutoMapperRegExExtractDataType
      :staticmethod:

      Extracts a specific group matched by a regex from a specified column. If there
      was no match or the requested group does not exist, an empty string is returned.

      :param column: column whose contents to replace
      :param pattern: pattern containing groups to match
      :param index: index of the group to return (1-indexed, use 0 to return the whole matched string)
      :return: a regex_extract automapper type


   .. method:: trim(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType) -> spark_auto_mapper.data_types.trim.AutoMapperTrimDataType
      :staticmethod:

      Trim the spaces from both ends for the specified string column.

      :param column: column whose contents to trim
      :return: a trim automapper type


   .. method:: lpad(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, length: int, pad: str) -> spark_auto_mapper.data_types.lpad.AutoMapperLPadDataType
      :staticmethod:

      Returns column value, left-padded with pad to a length of length. If column value is longer than length,
      the return value is shortened to length characters.

      :param column: column whose contents to left pad
      :param length: the desired length of the final string
      :param pad: the character to use to pad the string to the desired length


   .. method:: hash(*args: Union[(AutoMapperNativeTextType, AutoMapperWrapperType, AutoMapperTextLikeBase)]) -> spark_auto_mapper.data_types.hash.AutoMapperHashDataType
      :staticmethod:

      Calculates the hash code of given columns, and returns the result as an int column.


      :param args: string or column
      :return: a concat automapper type


   .. method:: coalesce(*args: _TAutoMapperDataType) -> _TAutoMapperDataType
      :staticmethod:

      Returns the first value that is not null.

      :return: a coalesce automapper type


   .. method:: array_max(*args: _TAutoMapperDataType) -> _TAutoMapperDataType
      :staticmethod:

      Returns the first value that is not null.

      :return: a coalesce automapper type


   .. method:: array_distinct(*args: _TAutoMapperDataType) -> _TAutoMapperDataType
      :staticmethod:

      Returns the distinct items in the array.

      :return: a coalesce automapper type


   .. method:: if_regex(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, check: Union[(str, List[str])], value: _TAutoMapperDataType, else_: Optional[_TAutoMapperDataType] = None) -> _TAutoMapperDataType
      :staticmethod:

      Checks if column matches check_value.  Returns value if it matches else else_


      :param column: column to check
      :param check: value to compare the column to. Has to be a string or list of strings
      :param value: what to return if the value matches
      :param else_: what value to assign if check fails
      :return: an if automapper type


   .. method:: filter(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, func: Callable[([Column], Column)]) -> spark_auto_mapper.data_types.filter.AutoMapperFilterDataType
      :staticmethod:

      Filters a column by a function


      :param column: column to check
      :param func: func to filter by
      :return: a filter automapper type


   .. method:: transform(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, value: _TAutoMapperDataType) -> List[_TAutoMapperDataType]
      :staticmethod:

      transforms a column into another type or struct


      :param column: column to check
      :param value: func to create type or struct
      :return: a transform automapper type


   .. method:: field(value: str) -> spark_auto_mapper.data_types.text_like_base.AutoMapperTextLikeBase
      :staticmethod:

      Specifies that the value parameter should be used as a field name
      :param value: name of column
      :return: A column automapper type


   .. method:: current() -> spark_auto_mapper.data_types.text_like_base.AutoMapperTextLikeBase
      :staticmethod:

      Specifies to use the current item
      :return: A column automapper type


   .. method:: split_by_delimiter(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, delimiter: str) -> spark_auto_mapper.data_types.split_by_delimiter.AutoMapperSplitByDelimiterDataType
      :staticmethod:

      Split a string into an array using the delimiter

      :param column: column whose contents to use
      :param delimiter: string to use as delimiter
      :return: a concat automapper type


   .. method:: float(value: spark_auto_mapper.data_types.data_type_base.AutoMapperDataTypeBase) -> spark_auto_mapper.data_types.data_type_base.AutoMapperDataTypeBase
      :staticmethod:

      Converts column to float

      :return:
      :rtype:


   .. method:: flatten(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType) -> spark_auto_mapper.data_types.data_type_base.AutoMapperDataTypeBase
      :staticmethod:

      creates a single array from an array of arrays.
      If a structure of nested arrays is deeper than two levels, only one level of nesting is removed.
      source: http://spark.apache.org/docs/latest/api/python/_modules/pyspark/sql/functions.html#flatten

      :return: a flatten automapper type


   .. method:: first_valid_column(*columns: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType) -> spark_auto_mapper.data_types.data_type_base.AutoMapperDataTypeBase
      :staticmethod:

      Allows for columns to be defined based in which a source column may not exist. If the optional source column does
      not exist, the "default" column definition is used instead.

      :return: a optional automapper type


   .. method:: if_column_exists(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, if_exists: Optional[_TAutoMapperDataType], if_not_exists: Optional[_TAutoMapperDataType]) -> spark_auto_mapper.data_types.data_type_base.AutoMapperDataTypeBase
      :staticmethod:

      check the if the column exists if exists returns if_exists if not if_not_exists
      :return: a optional automapper type


   .. method:: array(value: spark_auto_mapper.data_types.data_type_base.AutoMapperDataTypeBase) -> spark_auto_mapper.data_types.data_type_base.AutoMapperDataTypeBase
      :staticmethod:

      creates an array from a single item.
      source: http://spark.apache.org/docs/latest/api/python/_modules/pyspark/sql/functions.html#array

      :return: an array automapper type


   .. method:: join_using_delimiter(column: spark_auto_mapper.type_definitions.wrapper_types.AutoMapperColumnOrColumnLikeType, delimiter: str) -> spark_auto_mapper.data_types.join_using_delimiter.AutoMapperJoinUsingDelimiterDataType
      :staticmethod:

      Joins an array and forms a string using the delimiter
      :param column: column whose contents to use
      :param delimiter: string to use as delimiter
      :return: a join automapper type



